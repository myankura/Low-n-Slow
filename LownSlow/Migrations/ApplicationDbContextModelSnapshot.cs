// <auto-generated />
using System;
using LownSlow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LownSlow.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LownSlow.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "00000000-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c098dc9-e773-4b03-a627-93b852271bfd",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            FirstName = "admin",
                            LastName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECNkp4EJPx7ORysYMG5HQO8neMB6W2rZrgZsGwpvGMxNMrhoyfyQc0GPc72Hjv/U8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7f434309-a4d9-48e9-9ebb-8803db794577",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "11111111-ffff-ffff-ffff-ffffffffffff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5139d339-0532-4bc2-b31b-d112d9e1da9d",
                            Email = "michael@me.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Yankura",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL@ME.COM",
                            NormalizedUserName = "MICHAEL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGHcO8E8Locxc3oxCuCT/A+D8x0keZXr2LJT1BJoJT1VHekLuRwfZ6W3rAn68QiAVw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "j4k6l3k0-d87f-98eh-10kk-2285db796699",
                            TwoFactorEnabled = false,
                            UserName = "michael@gmail.com"
                        });
                });

            modelBuilder.Entity("LownSlow.Models.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("MaxCookTemp");

                    b.Property<int>("MaxCookTime");

                    b.Property<int>("MaxFinishedTemp");

                    b.Property<int>("MinCookTemp");

                    b.Property<int>("MinCookTime");

                    b.Property<int>("MinFinishedTemp");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Type");

                    b.HasKey("FoodId");

                    b.ToTable("Food");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            Description = "This cut comes from the back of the cow.",
                            MaxCookTemp = 250,
                            MaxCookTime = 240,
                            MaxFinishedTemp = 205,
                            MinCookTemp = 225,
                            MinCookTime = 180,
                            MinFinishedTemp = 190,
                            Name = "Back ribs",
                            Type = "Beef"
                        },
                        new
                        {
                            FoodId = 2,
                            Description = "A large slab of beef.",
                            MaxCookTemp = 250,
                            MaxCookTime = 1200,
                            MaxFinishedTemp = 205,
                            MinCookTemp = 225,
                            MinCookTime = 720,
                            MinFinishedTemp = 190,
                            Name = "Brisket",
                            Type = "Beef"
                        },
                        new
                        {
                            FoodId = 3,
                            Description = "These ribs are short.",
                            MaxCookTemp = 250,
                            MaxCookTime = 480,
                            MaxFinishedTemp = 200,
                            MinCookTemp = 225,
                            MinCookTime = 360,
                            MinFinishedTemp = 190,
                            Name = "Short Rib",
                            Type = "Beef"
                        },
                        new
                        {
                            FoodId = 4,
                            Description = "Tender goodness, there's a reason why it's so expensive.",
                            MaxCookTemp = 250,
                            MaxCookTime = 120,
                            MaxFinishedTemp = 145,
                            MinCookTemp = 225,
                            MinCookTime = 60,
                            MinFinishedTemp = 140,
                            Name = "Prime rib",
                            Type = "Beef"
                        },
                        new
                        {
                            FoodId = 5,
                            Description = "A tender cut of meat.",
                            MaxCookTemp = 250,
                            MaxCookTime = 180,
                            MaxFinishedTemp = 205,
                            MinCookTemp = 225,
                            MinCookTime = 150,
                            MinFinishedTemp = 190,
                            Name = "Tenderloin",
                            Type = "Beef"
                        },
                        new
                        {
                            FoodId = 6,
                            Description = "I want my baby back, baby back ribs.",
                            MaxCookTemp = 250,
                            MaxCookTime = 360,
                            MaxFinishedTemp = 190,
                            MinCookTemp = 225,
                            MinCookTime = 300,
                            MinFinishedTemp = 180,
                            Name = "Baby back ribs",
                            Type = "Pork"
                        },
                        new
                        {
                            FoodId = 7,
                            Description = "Everyone loves bacon.",
                            MaxCookTemp = 0,
                            MaxCookTime = 390,
                            MaxFinishedTemp = 150,
                            MinCookTemp = 99,
                            MinCookTime = 360,
                            MinFinishedTemp = 140,
                            Name = "Belly bacon",
                            Type = "Pork"
                        },
                        new
                        {
                            FoodId = 8,
                            Description = "Throw a whole pig on the smoker.",
                            MaxCookTemp = 250,
                            MaxCookTime = 1080,
                            MaxFinishedTemp = 210,
                            MinCookTemp = 225,
                            MinCookTime = 960,
                            MinFinishedTemp = 205,
                            Name = "Whole hog",
                            Type = "Pork"
                        },
                        new
                        {
                            FoodId = 9,
                            Description = "Pork sausage.",
                            MaxCookTemp = 250,
                            MaxCookTime = 180,
                            MaxFinishedTemp = 170,
                            MinCookTemp = 225,
                            MinCookTime = 60,
                            MinFinishedTemp = 165,
                            Name = "Sausage",
                            Type = "Pork"
                        },
                        new
                        {
                            FoodId = 10,
                            Description = "A tender cut of pork, hence the name.",
                            MaxCookTemp = 250,
                            MaxCookTime = 180,
                            MaxFinishedTemp = 165,
                            MinCookTemp = 225,
                            MinCookTime = 150,
                            MinFinishedTemp = 160,
                            Name = "Pork Tenderloin",
                            Type = "Pork"
                        },
                        new
                        {
                            FoodId = 11,
                            Description = "A leg from a lamb.",
                            MaxCookTemp = 250,
                            MaxCookTime = 480,
                            MaxFinishedTemp = 150,
                            MinCookTemp = 225,
                            MinCookTime = 240,
                            MinFinishedTemp = 140,
                            Name = "Leg",
                            Type = "Lamb"
                        },
                        new
                        {
                            FoodId = 12,
                            Description = "Lamb shoulder.",
                            MaxCookTemp = 250,
                            MaxCookTime = 330,
                            MaxFinishedTemp = 175,
                            MinCookTemp = 225,
                            MinCookTime = 300,
                            MinFinishedTemp = 170,
                            Name = "Shoulder",
                            Type = "Lamb"
                        },
                        new
                        {
                            FoodId = 13,
                            Description = "Lamb shank.",
                            MaxCookTemp = 250,
                            MaxCookTime = 300,
                            MaxFinishedTemp = 195,
                            MinCookTemp = 225,
                            MinCookTime = 240,
                            MinFinishedTemp = 190,
                            Name = "Shank",
                            Type = "Lamb"
                        },
                        new
                        {
                            FoodId = 14,
                            Description = "A whole bird.",
                            MaxCookTemp = 350,
                            MaxCookTime = 240,
                            MaxFinishedTemp = 175,
                            MinCookTemp = 275,
                            MinCookTime = 180,
                            MinFinishedTemp = 170,
                            Name = "Whole Chicken",
                            Type = "Poultry"
                        },
                        new
                        {
                            FoodId = 15,
                            Description = "Dark meat.",
                            MaxCookTemp = 350,
                            MaxCookTime = 240,
                            MaxFinishedTemp = 175,
                            MinCookTemp = 275,
                            MinCookTime = 90,
                            MinFinishedTemp = 170,
                            Name = "Chicken thighs",
                            Type = "Poultry"
                        },
                        new
                        {
                            FoodId = 16,
                            Description = "White meat.",
                            MaxCookTemp = 350,
                            MaxCookTime = 90,
                            MaxFinishedTemp = 175,
                            MinCookTemp = 275,
                            MinCookTime = 75,
                            MinFinishedTemp = 170,
                            Name = "Chicken wings",
                            Type = "Poultry"
                        },
                        new
                        {
                            FoodId = 17,
                            Description = "Gobble Gobble.",
                            MaxCookTemp = 350,
                            MaxCookTime = 300,
                            MaxFinishedTemp = 175,
                            MinCookTemp = 275,
                            MinCookTime = 240,
                            MinFinishedTemp = 170,
                            Name = "Whole turkey",
                            Type = "Poultry"
                        },
                        new
                        {
                            FoodId = 18,
                            Description = "Dark meat.",
                            MaxCookTemp = 350,
                            MaxCookTime = 180,
                            MaxFinishedTemp = 175,
                            MinCookTemp = 275,
                            MinCookTime = 120,
                            MinFinishedTemp = 170,
                            Name = "Turkey leg",
                            Type = "Poultry"
                        },
                        new
                        {
                            FoodId = 19,
                            Description = "White meat.",
                            MaxCookTemp = 350,
                            MaxCookTime = 270,
                            MaxFinishedTemp = 175,
                            MinCookTemp = 275,
                            MinCookTime = 240,
                            MinFinishedTemp = 165,
                            Name = "Turkey breast",
                            Type = "Poultry"
                        },
                        new
                        {
                            FoodId = 20,
                            Description = "Wild birds.",
                            MaxCookTemp = 230,
                            MaxCookTime = 90,
                            MaxFinishedTemp = 165,
                            MinCookTemp = 225,
                            MinCookTime = 60,
                            MinFinishedTemp = 160,
                            Name = "Quail/Pheasant",
                            Type = "Poultry"
                        },
                        new
                        {
                            FoodId = 21,
                            Description = "A whole bird.",
                            MaxCookTemp = 250,
                            MaxCookTime = 0,
                            MaxFinishedTemp = 170,
                            MinCookTemp = 225,
                            MinCookTime = 240,
                            MinFinishedTemp = 165,
                            Name = "Whole duck",
                            Type = "Poultry"
                        },
                        new
                        {
                            FoodId = 22,
                            Description = "Wild caught salmon.",
                            MaxCookTemp = 350,
                            MaxCookTime = 120,
                            MaxFinishedTemp = 150,
                            MinCookTemp = 275,
                            MinCookTime = 90,
                            MinFinishedTemp = 145,
                            Name = "Salmon filet",
                            Type = "Seafood"
                        },
                        new
                        {
                            FoodId = 23,
                            Description = "Wild caught trout.",
                            MaxCookTemp = 0,
                            MaxCookTime = 120,
                            MaxFinishedTemp = 150,
                            MinCookTemp = 225,
                            MinCookTime = 90,
                            MinFinishedTemp = 145,
                            Name = "Whole trout",
                            Type = "Seafood"
                        },
                        new
                        {
                            FoodId = 24,
                            Description = "Smoked lobster tail.",
                            MaxCookTemp = 0,
                            MaxCookTime = 60,
                            MaxFinishedTemp = 145,
                            MinCookTemp = 225,
                            MinCookTime = 45,
                            MinFinishedTemp = 140,
                            Name = "Lobster tails",
                            Type = "Seafood"
                        },
                        new
                        {
                            FoodId = 25,
                            Description = "Everyone loves smoked oysters. Well maybe not everyone.",
                            MaxCookTemp = 0,
                            MaxCookTime = 40,
                            MaxFinishedTemp = 165,
                            MinCookTemp = 225,
                            MinCookTime = 30,
                            MinFinishedTemp = 160,
                            Name = "Oysters",
                            Type = "Seafood"
                        },
                        new
                        {
                            FoodId = 26,
                            Description = "Slow smoked shrimp.",
                            MaxCookTemp = 0,
                            MaxCookTime = 30,
                            MaxFinishedTemp = 170,
                            MinCookTemp = 225,
                            MinCookTime = 20,
                            MinFinishedTemp = 165,
                            Name = "Shrimp",
                            Type = "Seafood"
                        },
                        new
                        {
                            FoodId = 27,
                            Description = "Smoked corn.",
                            MaxCookTemp = 240,
                            MaxCookTime = 120,
                            MaxFinishedTemp = 0,
                            MinCookTemp = 225,
                            MinCookTime = 90,
                            MinFinishedTemp = 0,
                            Name = "Corn",
                            Type = "Vegetable & Miscellaneous"
                        },
                        new
                        {
                            FoodId = 28,
                            Description = "Smoked potatoes.",
                            MaxCookTemp = 240,
                            MaxCookTime = 180,
                            MaxFinishedTemp = 0,
                            MinCookTemp = 225,
                            MinCookTime = 120,
                            MinFinishedTemp = 0,
                            Name = "Potatoes",
                            Type = "Vegetable & Miscellaneous"
                        },
                        new
                        {
                            FoodId = 29,
                            Description = "Cajun blood sausage.",
                            MaxCookTemp = 240,
                            MaxCookTime = 0,
                            MaxFinishedTemp = 0,
                            MinCookTemp = 225,
                            MinCookTime = 120,
                            MinFinishedTemp = 0,
                            Name = "Boudin",
                            Type = "Vegetable & Miscellaneous"
                        },
                        new
                        {
                            FoodId = 30,
                            Description = "Smoked brats.",
                            MaxCookTemp = 240,
                            MaxCookTime = 120,
                            MaxFinishedTemp = 0,
                            MinCookTemp = 225,
                            MinCookTime = 90,
                            MinFinishedTemp = 0,
                            Name = "Brats",
                            Type = "Vegetable & Miscellaneous"
                        },
                        new
                        {
                            FoodId = 31,
                            Description = "This time is pretty much the same for most cheeses.",
                            MaxCookTemp = 90,
                            MaxCookTime = 240,
                            MaxFinishedTemp = 0,
                            MinCookTemp = 80,
                            MinCookTime = 210,
                            MinFinishedTemp = 0,
                            Name = "Smoked cheese",
                            Type = "Vegetable & Miscellaneous"
                        });
                });

            modelBuilder.Entity("LownSlow.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("IngredientId");

                    b.HasIndex("UserId");

                    b.ToTable("Ingredient");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            Name = "Salt",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 2,
                            Name = "Sugar",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 3,
                            Name = "Pepper",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 4,
                            Name = "Apple Cider Vinegar",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 5,
                            Name = "Cayenne",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 6,
                            Name = "Garlic Powder",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 7,
                            Name = "Onion Powder",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 8,
                            Name = "Whole Chicken",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 9,
                            Name = "Salmon filet",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 10,
                            Name = "Better Salt",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 11,
                            Name = "Better Sugar",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 12,
                            Name = "Better Pepper",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 13,
                            Name = "Better Apple Cider Vinegar",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 14,
                            Name = "Better Cayenne",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 15,
                            Name = "Better Garlic Powder",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 16,
                            Name = "Better Onion Powder",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 17,
                            Name = "Whole Chicken",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            IngredientId = 18,
                            Name = "Salamon filet",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("LownSlow.Models.IngredientList", b =>
                {
                    b.Property<int>("IngredientListId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("IngredientId");

                    b.Property<string>("Measurement")
                        .IsRequired();

                    b.Property<int>("Quantity");

                    b.Property<int>("RecipeId");

                    b.HasKey("IngredientListId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("IngredientList");

                    b.HasData(
                        new
                        {
                            IngredientListId = 1,
                            IngredientId = 1,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientListId = 2,
                            IngredientId = 2,
                            Measurement = "Tbsp",
                            Quantity = 5,
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientListId = 3,
                            IngredientId = 3,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientListId = 4,
                            IngredientId = 4,
                            Measurement = "tsp",
                            Quantity = 5,
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientListId = 5,
                            IngredientId = 5,
                            Measurement = "Tbsp",
                            Quantity = 6,
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientListId = 6,
                            IngredientId = 6,
                            Measurement = "Tbsp",
                            Quantity = 10,
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientListId = 7,
                            IngredientId = 7,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientListId = 8,
                            IngredientId = 8,
                            Measurement = "lbs",
                            Quantity = 1,
                            RecipeId = 1
                        },
                        new
                        {
                            IngredientListId = 9,
                            IngredientId = 1,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientListId = 10,
                            IngredientId = 2,
                            Measurement = "Tbsp",
                            Quantity = 5,
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientListId = 11,
                            IngredientId = 3,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientListId = 12,
                            IngredientId = 5,
                            Measurement = "Tbsp",
                            Quantity = 6,
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientListId = 13,
                            IngredientId = 6,
                            Measurement = "Tbsp",
                            Quantity = 10,
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientListId = 14,
                            IngredientId = 7,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientListId = 15,
                            IngredientId = 9,
                            Measurement = "lbs",
                            Quantity = 10,
                            RecipeId = 2
                        },
                        new
                        {
                            IngredientListId = 16,
                            IngredientId = 10,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 3
                        },
                        new
                        {
                            IngredientListId = 17,
                            IngredientId = 11,
                            Measurement = "Tbsp",
                            Quantity = 5,
                            RecipeId = 3
                        },
                        new
                        {
                            IngredientListId = 18,
                            IngredientId = 12,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 3
                        },
                        new
                        {
                            IngredientListId = 19,
                            IngredientId = 13,
                            Measurement = "tsp",
                            Quantity = 5,
                            RecipeId = 3
                        },
                        new
                        {
                            IngredientListId = 20,
                            IngredientId = 14,
                            Measurement = "Tbsp",
                            Quantity = 6,
                            RecipeId = 3
                        },
                        new
                        {
                            IngredientListId = 21,
                            IngredientId = 15,
                            Measurement = "Tbsp",
                            Quantity = 10,
                            RecipeId = 3
                        },
                        new
                        {
                            IngredientListId = 22,
                            IngredientId = 16,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 3
                        },
                        new
                        {
                            IngredientListId = 23,
                            IngredientId = 17,
                            Measurement = "lbs",
                            Quantity = 1,
                            RecipeId = 3
                        },
                        new
                        {
                            IngredientListId = 24,
                            IngredientId = 10,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 4
                        },
                        new
                        {
                            IngredientListId = 25,
                            IngredientId = 11,
                            Measurement = "Tbsp",
                            Quantity = 5,
                            RecipeId = 4
                        },
                        new
                        {
                            IngredientListId = 26,
                            IngredientId = 12,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 4
                        },
                        new
                        {
                            IngredientListId = 27,
                            IngredientId = 14,
                            Measurement = "Tbsp",
                            Quantity = 6,
                            RecipeId = 4
                        },
                        new
                        {
                            IngredientListId = 28,
                            IngredientId = 15,
                            Measurement = "Tbsp",
                            Quantity = 10,
                            RecipeId = 4
                        },
                        new
                        {
                            IngredientListId = 29,
                            IngredientId = 16,
                            Measurement = "tsp",
                            Quantity = 10,
                            RecipeId = 4
                        },
                        new
                        {
                            IngredientListId = 30,
                            IngredientId = 18,
                            Measurement = "lbs",
                            Quantity = 1,
                            RecipeId = 4
                        });
                });

            modelBuilder.Entity("LownSlow.Models.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Directions")
                        .IsRequired();

                    b.Property<bool>("Favorite");

                    b.Property<int>("TechniqueId");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipe");

                    b.HasData(
                        new
                        {
                            RecipeId = 1,
                            Comment = "Well, it was edible",
                            Description = "A bird that has been cooked in smoke for at a low temperature",
                            Directions = "Stuff happens here",
                            Favorite = false,
                            TechniqueId = 1,
                            Title = "BBQ Chicken",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            RecipeId = 2,
                            Comment = "I would recommend this to a friend",
                            Description = "Damn that was good",
                            Directions = "Stuff happens here",
                            Favorite = true,
                            TechniqueId = 2,
                            Title = "Smoked Salamon",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            RecipeId = 3,
                            Comment = "Best damn chicken I've ever had",
                            Description = "A hickory smoked bird bathed in BBQ sauce",
                            Directions = "Stuff happens here",
                            Favorite = false,
                            TechniqueId = 1,
                            Title = "BBQ Chicken",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            RecipeId = 4,
                            Comment = "I would recommend this to a friend",
                            Description = "Damn that was good",
                            Directions = "Stuff happens here",
                            Favorite = true,
                            TechniqueId = 2,
                            Title = "Smoked Salamon",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("LownSlow.Models.Technique", b =>
                {
                    b.Property<int>("TechniqueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("TechniqueId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Technique");

                    b.HasData(
                        new
                        {
                            TechniqueId = 1,
                            Description = "Uses charcoal and wood to smoke food at a temperature between 190F - 350F",
                            Name = "Regular Smoke",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            TechniqueId = 2,
                            Description = "Uses wood dust to keep an ember smoldering at a low temperature around 100 - 140F",
                            Name = "Cold Smoke",
                            UserId = "00000000-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            TechniqueId = 3,
                            Description = "Uses charcoal and wood to smoke food at a temperature between 190F - 350F",
                            Name = "Regular Smoke",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        },
                        new
                        {
                            TechniqueId = 4,
                            Description = "Uses powdered wood to keep an ember smoldering at a low temperature around 100 - 140F",
                            Name = "Cold Smoke",
                            UserId = "11111111-ffff-ffff-ffff-ffffffffffff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LownSlow.Models.Ingredient", b =>
                {
                    b.HasOne("LownSlow.Models.ApplicationUser", "User")
                        .WithMany("Ingredients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LownSlow.Models.IngredientList", b =>
                {
                    b.HasOne("LownSlow.Models.ApplicationUser")
                        .WithMany("IngredientLists")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("LownSlow.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientLists")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LownSlow.Models.Recipe", "Recipe")
                        .WithMany("IngredientLists")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("LownSlow.Models.Recipe", b =>
                {
                    b.HasOne("LownSlow.Models.ApplicationUser", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LownSlow.Models.Technique", b =>
                {
                    b.HasOne("LownSlow.Models.ApplicationUser")
                        .WithMany("Techniques")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LownSlow.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LownSlow.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LownSlow.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LownSlow.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
